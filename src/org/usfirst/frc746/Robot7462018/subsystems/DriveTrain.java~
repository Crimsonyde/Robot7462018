// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc746.Robot7462018.subsystems;

import org.usfirst.frc746.Robot7462018.RobotMap;
import org.usfirst.frc746.Robot7462018.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController talon1 = RobotMap.driveTrainTalon1;
    private final SpeedController talon2 = RobotMap.driveTrainTalon2;
    private final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
    	setDefaultCommand(new tankDrive());
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void getDriveSticks(Joystick left) {
		robotDrive.arcadeDrive(left);
	}

	public void stop() {
		robotDrive.drive(0, 0);
	}

	public void driveStraight(double throttle) {
		robotDrive.arcadeDrive(throttle, 0);

	}

	public void turnRobot(int speed, double turning) {
		robotDrive.arcadeDrive(speed, turning);
	}

	public void getTankDrive(Joystick driver) {
		setTankDrive(-driver.getAxis(AxisType.kTwist), -driver.getAxis(AxisType.kThrottle));
	}
	
	public void reverseTankDrive(Joystick driver) {
		setTankDrive(driver.getAxis(AxisType.kTwist), driver.getAxis(AxisType.kThrottle));
	}

	public void setTankDrive(double leftSide, double rightSide) {
		robotDrive.tankDrive(leftSide, rightSide);
	}
}

